//1. make
//2. ./tp2_ex4/tp2_ex4

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <cmath>
#include <string>
#include <fstream>

using namespace std;


// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

//============================================


/* process all input: query GLFW whether relevant keys are pressed/released 
this frame and react accordingly 
-----------------------------------------------------------------------*/
// Funcao que deteta o Enter
void processInput(GLFWwindow *window)
{
  if (glfwGetKey(window, GLFW_KEY_ENTER) == GLFW_PRESS)
    glfwSetWindowShouldClose(window, true);
}

/* glfw: whenever the window size changed (by OS or user resize) this
   callback function executes
   -------------------------------------------------------------------*/
// Funcao que cria a janela e deteta movimento, dimensoes,etc
void framebuffer_size_callback(GLFWwindow *window, int width, int height)
{
  // make sure the viewport matches the new window dimensions; note that
  // width and height will be significantly larger than specified on
  // retina displays.
  glViewport(0, 0, width, height);
}



int main()
{

  // glfw: initialize and configure
  // ------------------------------
  glfwInit();
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
  glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

  // glfw window creation
  // --------------------
  GLFWwindow *window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Letra 2D", NULL,
                                        NULL);

  if (window == NULL)
  {
    std::cout << "Failed to create GLFW window" << std::endl;
    glfwTerminate();
    return -1;
  }
  glfwMakeContextCurrent(window);
  glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

  // glad: load all OpenGL function pointers
  // ---------------------------------------
  if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
  {
    std::cout << "Failed to initialize GLAD" << std::endl;
    return -1;
  }

  // declare and define vshader, position 4 in vector declaration
  // is for "w" = perspective division
  const char *vertexShaderSource = "#version 330 core\n"
                                   "layout (location = 0) in vec3 aPos;\n"
                                   "void main()\n"
                                   "{\n"
                                   "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
                                   "}\0";
  // declare and define fshader, position in color vector declaration
  // are RGBA from [0,1] and where A = alpha (opacity)
  const char *fragmentShaderSource = "#version 330 core\n"
                                     "out vec4 FragColor;\n"
                                     "void main()\n"
                                     "{\n"
                                     "   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
                                     "}\n\0";

  //===========================================
  // build and compile our shader program
  // ------------------------------------
  // vertex shader
  unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
  glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
  glCompileShader(vertexShader);
  // check for vertex shader compile errors
  int success;
  char infoLog[512];
  glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
  if (!success)
  {
    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"
              << infoLog << std::endl;
  }
  // fragment shader
  unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
  glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
  glCompileShader(fragmentShader);
  // check for fragment shader compile errors
  glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
  if (!success)
  {
    glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"
              << infoLog << std::endl;
  }

  // link shaders : puts together the vertex and the fragment shaders
  // into a "shader program object"
  unsigned int shaderProgram = glCreateProgram();
  glAttachShader(shaderProgram, vertexShader);
  glAttachShader(shaderProgram, fragmentShader);
  glLinkProgram(shaderProgram);
  // check for shader linking errors
  glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
  if (!success)
  {
    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n"
              << infoLog << std::endl;
  }
  // delete shaders, we don't need them anymore
  glDeleteShader(vertexShader);
  glDeleteShader(fragmentShader);

  //=================================================
  // set up vertex data (and buffer(s)) and configure vertex attributes
  // ------------------------------------------------------------------

  //Read Data for vertice and indexes coordinates and values
  //readData();

float vertices[]={ -0.207362, 0.356306, 
                  -0.214272, 0.364598, 
                  -0.213146, 0.464524, 
                  -0.211942, 0.588420, 
                  -0.211075, 0.650030, 
                  -0.209375, 0.703773, 
                  -0.208348, 0.735777, 
                  -0.205439, 0.763845, 
                  -0.202701, 0.783527, 
                  -0.198422, 0.800983, 
                  -0.195684, 0.810739, 
                  -0.192945, 0.820494, 
                  -0.188324, 0.830592, 
                  -0.181307, 0.844797, 
                  -0.17121, 0.859858, 
                  -0.157689, 0.875090, 
                  -0.141259, 0.888610, 
                  -0.126541, 0.898366, 
                  -0.112164, 0.905040, 
                  -0.098301, 0.909490, 
                  -0.084096, 0.912742, 
                  -0.069378, 0.914624, 
                  -0.050723, 0.914967, 
                  -0.037716, 0.913255, 
                  -0.026762, 0.910346, 
                  -0.014098, 0.904013, 
                  -0.004513, 0.897681, 
                  0.004557, 0.890150, 
                  0.012088, 0.880566, 
                  0.018591, 0.871495, 
                  0.023212, 0.859858, 
                  0.026464, 0.850102, 
                  0.028175, 0.838293, 
                  0.028175, 0.820323, 
                  0.025951, 0.809883, 
                  0.021843, 0.796191, 
                  0.016366, 0.783355, 
                  0.007980, 0.770177, 
                  -0.001946, 0.756999, 
                  -0.013242, 0.746901, 
                  -0.023682, 0.738686, 
                  -0.03241, 0.732867, 
                  -0.043535, 0.726877, 
                  -0.047985, 0.725166, 
                  -0.048669, 0.717122, 
                  -0.035491, 0.716095, 
                  -0.015124, 0.713528, 
                  0.005755, 0.707538, 
                  0.018934, 0.701205, 
                  0.032968, 0.691450, 
                  0.044948, 0.677245, 
                  0.054874, 0.661499, 
                  0.062747, 0.642673, 
                  0.066341, 0.626928, 
                  0.068224, 0.610840, 
                  0.068052, 0.594410, 
                  0.066341, 0.582430, 
                  0.062747, 0.567027, 
                  0.056415, 0.549912, 
                  0.050767, 0.539815, 
                  0.043236, 0.528348, 
                  0.034337, 0.519106, 
                  0.025437, 0.510035, 
                  0.013970, 0.501135, 
                  0.005413, 0.495316, 
                  -0.005369, 0.489669, 
                  -0.020943, 0.482823, 
                  -0.034977, 0.478373, 
                  -0.0473, 0.475806, 
                  -0.064757, 0.473410, 
                  -0.078449, 0.472383, 
                  -0.091969, 0.472725, 
                  -0.109426, 0.475635, 
                  -0.12192, 0.481625, 
                  -0.132702, 0.490695, 
                  -0.142115, 0.501991, 
                  -0.111822, 0.544778, 
                  -0.10412, 0.540841, 
                  -0.103949, 0.531770, 
                  -0.101553, 0.521502, 
                  -0.097103, 0.514314, 
                  -0.088204, 0.504216, 
                  -0.077422, 0.497884, 
                  -0.070405, 0.495316, 
                  -0.059109, 0.493434, 
                  -0.046273, 0.494974, 
                  -0.029672, 0.500793, 
                  -0.017178, 0.510548, 
                  -0.006567, 0.523384, 
                  0.002846, 0.539301, 
                  0.010547, 0.558640, 
                  0.013457, 0.576269, 
                  0.016024, 0.592356, 
                  0.015511, 0.613578, 
                  0.01261, 0.631035, 
                  0.007296, 0.646096, 
                  -0.000577, 0.660986, 
                  -0.010675, 0.673308, 
                  -0.020772, 0.681181, 
                  -0.033266, 0.689396, 
                  -0.05175, 0.696071, 
                  -0.064586, 0.698980, 
                  -0.084781, 0.700692, 
                  -0.118839, 0.700178, 
                  -0.124829, 0.699323, 
                  -0.124658, 0.720716, 
                  -0.111822, 0.721229, 
                  -0.093338, 0.723625, 
                  -0.07417, 0.730471, 
                  -0.058424, 0.738686, 
                  -0.044048, 0.750153, 
                  -0.034464, 0.761791, 
                  -0.028816, 0.772744, 
                  -0.023511, 0.784211, 
                  -0.020943, 0.797731, 
                  -0.019403, 0.811252, 
                  -0.019232, 0.825971, 
                  -0.021799, 0.836924, 
                  -0.026762, 0.851471, 
                  -0.037716, 0.866532, 
                  -0.045417, 0.873378, 
                  -0.052948, 0.878170, 
                  -0.061847, 0.882962, 
                  -0.070747, 0.885700, 
                  -0.081016, 0.886898, 
                  -0.096077, 0.885529, 
                  -0.105832, 0.883133, 
                  -0.113705, 0.879710, 
                  -0.122262, 0.875774, 
                  -0.130819, 0.868244, 
                  -0.136638, 0.862253, 
                  -0.142971, 0.854552, 
                  -0.147592, 0.845139, 
                  -0.153411, 0.831447, 
                  -0.15632, 0.819638, 
                  -0.158716, 0.809711, 
                  -0.160941, 0.798758, 
                  -0.162824, 0.787805, 
                  -0.164193, 0.777536, 
                  -0.16522, 0.765213, 
                  -0.161163, 0.376286, 
                  -0.207361, 0.356306, 
                  -0.214272, 0.364598, 
                  -0.213146, 0.464524, 
                  -0.211942, 0.588420, 
                  -0.211075, 0.650030, 
                  -0.209375, 0.703773, 
                  -0.208348, 0.735777, 
                  -0.205439, 0.763845, 
                  -0.202701, 0.783527, 
                  -0.198422, 0.800983, 
                  -0.195684, 0.810739, 
                  -0.192945, 0.820494, 
                  -0.188324, 0.830592, 
                  -0.181307, 0.844797, 
                  -0.17121, 0.859858, 
                  -0.157689, 0.875090, 
                  -0.141259, 0.888610, 
                  -0.126541, 0.898366, 
                  -0.112164, 0.905040, 
                  -0.098301, 0.909490, 
                  -0.084096, 0.912742, 
                  -0.069378, 0.914624, 
                  -0.050723, 0.914967, 
                  -0.037716, 0.913255, 
                  -0.026762, 0.910346, 
                  -0.014098, 0.904013, 
                  -0.004513, 0.897681, 
                  0.004557, 0.890150, 
                  0.012088, 0.880566, 
                  0.018591, 0.871495, 
                  0.023212, 0.859858, 
                  0.026464, 0.850102, 
                  0.028175, 0.838293, 
                  0.028175, 0.820323, 
                  0.025951, 0.809883, 
                  0.021843, 0.796191, 
                  0.016366, 0.783355, 
                  0.007980, 0.770177, 
                  -0.001946, 0.756999, 
                  -0.013242, 0.746901, 
                  -0.023682, 0.738686, 
                  -0.03241, 0.732867, 
                  -0.043535, 0.726877, 
                  -0.047985, 0.725166, 
                  -0.048669, 0.717122, 
                  -0.035491, 0.716095, 
                  -0.015124, 0.713528, 
                  0.005755, 0.707538, 
                  0.018934, 0.701205, 
                  0.032968, 0.691450, 
                  0.044948, 0.677245, 
                  0.054874, 0.661499, 
                  0.062747, 0.642673, 
                  0.066341, 0.626928, 
                  0.068224, 0.610840, 
                  0.068052, 0.594410, 
                  0.066341, 0.582430, 
                  0.062747, 0.567027, 
                  0.056415, 0.549912, 
                  0.050767, 0.539814, 
                  0.043236, 0.528348, 
                  0.034337, 0.519106, 
                  0.025437, 0.510035, 
                  0.013970, 0.501135, 
                  0.005413, 0.495316, 
                  -0.005369, 0.489669, 
                  -0.020943, 0.482823, 
                  -0.034977, 0.478373, 
                  -0.0473, 0.475806, 
                  -0.064757, 0.473410, 
                  -0.078449, 0.472383, 
                  -0.091969, 0.472725, 
                  -0.109426, 0.475635, 
                  -0.12192, 0.481625, 
                  -0.132702, 0.490695, 
                  -0.142115, 0.501991, 
                  -0.111822, 0.544778, 
                  -0.10412, 0.540841, 
                  -0.103949, 0.531770, 
                  -0.101553, 0.521502, 
                  -0.097103, 0.514314, 
                  -0.088204, 0.504216, 
                  -0.077422, 0.497884, 
                  -0.070405, 0.495316, 
                  -0.059109, 0.493434, 
                  -0.046273, 0.494974, 
                  -0.029672, 0.500793, 
                  -0.017178, 0.510548, 
                  -0.006567, 0.523384, 
                  0.002846, 0.539301, 
                  0.010547, 0.558640, 
                  0.013457, 0.576269, 
                  0.016024, 0.592356, 
                  0.015511, 0.613578, 
                  0.01261, 0.631035, 
                  0.007296, 0.646096, 
                  -0.000577, 0.660986, 
                  -0.010675, 0.673308, 
                  -0.020772, 0.681181, 
                  -0.033266, 0.689396, 
                  -0.05175, 0.696071, 
                  -0.064586, 0.698980, 
                  -0.084781, 0.700692, 
                  -0.118839, 0.700178, 
                  -0.124829, 0.699323, 
                  -0.124658, 0.720716, 
                  -0.111822, 0.721229, 
                  -0.093338, 0.723625, 
                  -0.07417, 0.730471, 
                  -0.058424, 0.738686, 
                  -0.044048, 0.750153, 
                  -0.034464, 0.761791, 
                  -0.028816, 0.772744, 
                  -0.023511, 0.784211, 
                  -0.020943, 0.797731, 
                  -0.019403, 0.811252, 
                  -0.019232, 0.825971, 
                  -0.021799, 0.836924, 
                  -0.026762, 0.851471, 
                  -0.037716, 0.866532, 
                  -0.045417, 0.873378, 
                  -0.052948, 0.878170, 
                  -0.061847, 0.882962, 
                  -0.070747, 0.885700, 
                  -0.081016, 0.886898, 
                  -0.096077, 0.885529, 
                  -0.105832, 0.883133, 
                  -0.113705, 0.879710, 
                  -0.122262, 0.875774, 
                  -0.130819, 0.868244, 
                  -0.136638, 0.862253, 
                  -0.142971, 0.854552, 
                  -0.147592, 0.845139, 
                  -0.153411, 0.831447, 
                  -0.15632, 0.819638, 
                  -0.158716, 0.809711, 
                  -0.160941, 0.798758, 
                  -0.162824, 0.787805, 
                  -0.164193, 0.777536, 
                  -0.16522, 0.765213, 
                  -0.161163, 0.376286, 
  };

  unsigned int indices[] = { 54, 
      55, 
      56, 
      57, 
      58, 
      59, 
      60, 
      61, 
      62, 
      63, 
      64, 
      65, 
      66, 
      67, 
      68, 
      69, 
      70, 
      71, 
      72, 
      73, 
      74, 
      75, 
      76, 
      77, 
      78, 
      79, 
      80, 
      81, 
      82, 
      83, 
      84, 
      85, 
      86, 
      87, 
      88, 
      89, 
      90, 
      91, 
      92, 
      93, 
      94, 
      95, 
      96, 
      97, 
      98, 
      99, 
      100, 
      101, 
      102, 
      103, 
      104, 
      105, 
      106, 
      107, 
      108, 
      109, 
      110, 
      111, 
      112, 
      113, 
      114, 
      115, 
      116, 
      117, 
      118, 
      119, 
      120, 
      121, 
      122, 
      123, 
      124, 
      125, 
      126, 
      127, 
      128, 
      129, 
      130, 
      131, 
      132, 
      133, 
      134, 
      135, 
      136, 
      137, 
      138, 
      139, 
      140, 
      0, 
      1, 
      2, 
      3, 
      4, 
      5, 
      6, 
      7, 
      8, 
      9, 
      10, 
      11, 
      12, 
      13, 
      14, 
      15, 
      16, 
      17, 
      18, 
      19, 
      20, 
      21, 
      22, 
      23, 
      24, 
      25, 
      26, 
      27, 
      28, 
      29, 
      30, 
      31, 
      32, 
      33, 
      34, 
      35, 
      36, 
      37, 
      38, 
      39, 
      40, 
      41, 
      42, 
      43, 
      44, 
      45, 
      46, 
      47, 
      48, 
      49, 
      50, 
      51, 
      52, 
      53, 
      23, 
      22, 
      121, 
      139, 
      8, 
      7, 
      24, 
      23, 
      120, 
      124, 
      21, 
      20, 
      25, 
      24, 
      120, 
      124, 
      20, 
      19, 
      16, 
      128, 
      17, 
      82, 
      70, 
      83, 
      88, 
      63, 
      62, 
      26, 
      119, 
      27, 
      125, 
      18, 
      126, 
      74, 
      79, 
      75, 
      120, 
      23, 
      121, 
      49, 
      96, 
      50, 
      34, 
      116, 
      115, 
      108, 
      101, 
      44, 
      17, 
      127, 
      18, 
      16, 
      129, 
      128, 
      26, 
      25, 
      119, 
      28, 
      118, 
      29, 
      111, 
      40, 
      39, 
      110, 
      42, 
      41, 
      57, 
      92, 
      91, 
      15, 
      130, 
      16, 
      117, 
      30, 
      118, 
      30, 
      29, 
      118, 
      51, 
      94, 
      52, 
      123, 
      21, 
      124, 
      14, 
      131, 
      15, 
      131, 
      14, 
      132, 
      31, 
      30, 
      117, 
      27, 
      118, 
      28, 
      113, 
      38, 
      37, 
      117, 
      32, 
      31, 
      13, 
      133, 
      132, 
      12, 
      133, 
      13, 
      33, 
      32, 
      116, 
      135, 
      11, 
      10, 
      12, 
      134, 
      133, 
      134, 
      12, 
      135, 
      33, 
      116, 
      34, 
      16, 
      130, 
      129, 
      18, 
      127, 
      126, 
      136, 
      10, 
      9, 
      34, 
      115, 
      35, 
      135, 
      10, 
      136, 
      135, 
      12, 
      11, 
      64, 
      88, 
      87, 
      136, 
      9, 
      137, 
      43, 
      109, 
      108, 
      35, 
      114, 
      36, 
      95, 
      50, 
      96, 
      8, 
      138, 
      137, 
      36, 
      113, 
      37, 
      138, 
      8, 
      139, 
      35, 
      115, 
      114, 
      122, 
      21, 
      123, 
      112, 
      38, 
      113, 
      78, 
      76, 
      75, 
      67, 
      86, 
      85, 
      106, 
      105, 
      103, 
      111, 
      39, 
      112, 
      121, 
      22, 
      122, 
      110, 
      40, 
      111, 
      42, 
      109, 
      43, 
      89, 
      62, 
      61, 
      109, 
      42, 
      110, 
      6, 
      5, 
      139, 
      84, 
      69, 
      68, 
      116, 
      32, 
      117, 
      108, 
      44, 
      43, 
      106, 
      102, 
      107, 
      102, 
      108, 
      107, 
      87, 
      65, 
      64, 
      139, 
      3, 
      140, 
      103, 
      105, 
      104, 
      44, 
      100, 
      45, 
      46, 
      98, 
      47, 
      101, 
      100, 
      44, 
      103, 
      102, 
      106, 
      137, 
      9, 
      8, 
      5, 
      4, 
      139, 
      58, 
      91, 
      90, 
      102, 
      101, 
      108, 
      45, 
      99, 
      46, 
      100, 
      99, 
      45, 
      73, 
      80, 
      74, 
      22, 
      21, 
      122, 
      98, 
      97, 
      47, 
      51, 
      50, 
      95, 
      65, 
      86, 
      66, 
      112, 
      39, 
      38, 
      99, 
      98, 
      46, 
      4, 
      3, 
      139, 
      95, 
      94, 
      51, 
      94, 
      53, 
      52, 
      93, 
      53, 
      94, 
      93, 
      54, 
      53, 
      92, 
      54, 
      93, 
      92, 
      55, 
      54, 
      92, 
      56, 
      55, 
      56, 
      92, 
      57, 
      2, 
      140, 
      3, 
      195, 
      194, 
      193, 
      192, 
      191, 
      190, 
      189, 
      188, 
      187, 
      186, 
      185, 
      184, 
      183, 
      182, 
      181, 
      180, 
      179, 
      178, 
      177, 
      176, 
      175, 
      174, 
      173, 
      172, 
      171, 
      170, 
      169, 
      168, 
      167, 
      166, 
      165, 
      164, 
      163, 
      162, 
      161, 
      160, 
      159, 
      158, 
      157, 
      156, 
      155, 
      154, 
      153, 
      152, 
      151, 
      150, 
      149, 
      148, 
      147, 
      146, 
      145, 
      144, 
      143, 
      142, 
      141, 
      281, 
      280, 
      279, 
      278, 
      277, 
      276, 
      275, 
      274, 
      273, 
      272, 
      271, 
      270, 
      269, 
      268, 
      267, 
      266, 
      265, 
      264, 
      263, 
      262, 
      261, 
      260, 
      259, 
      258, 
      257, 
      256, 
      255, 
      254, 
      253, 
      252, 
      251, 
      250, 
      249, 
      248, 
      247, 
      246, 
      245, 
      244, 
      243, 
      242, 
      241, 
      240, 
      239, 
      238, 
      237, 
      236, 
      235, 
      234, 
      233, 
      232, 
      231, 
      230, 
      229, 
      228, 
      227, 
      226, 
      225, 
      224, 
      223, 
      222, 
      221, 
      220, 
      219, 
      218, 
      217, 
      216, 
      215, 
      214, 
      213, 
      212, 
      211, 
      210, 
      209, 
      208, 
      207, 
      206, 
      205, 
      204, 
      203, 
      202, 
      201, 
      200, 
      199, 
      198, 
      197, 
      196, 
      57, 
      91, 
      58, 
      119, 
      25, 
      120, 
      58, 
      90, 
      59, 
      119, 
      118, 
      27, 
      77, 
      76, 
      78, 
      85, 
      68, 
      67, 
      89, 
      60, 
      90, 
      60, 
      89, 
      61, 
      75, 
      79, 
      78, 
      48, 
      96, 
      49, 
      88, 
      62, 
      89, 
      80, 
      79, 
      74, 
      125, 
      19, 
      18, 
      81, 
      80, 
      73, 
      63, 
      88, 
      64, 
      110, 
      41, 
      40, 
      82, 
      81, 
      71, 
      70, 
      69, 
      83, 
      15, 
      131, 
      130, 
      86, 
      65, 
      87, 
      72, 
      81, 
      73, 
      71, 
      81, 
      72, 
      17, 
      128, 
      127, 
      36, 
      114, 
      113, 
      132, 
      14, 
      13, 
      66, 
      86, 
      67, 
      124, 
      19, 
      125, 
      84, 
      68, 
      85, 
      90, 
      60, 
      59, 
      83, 
      69, 
      84, 
      97, 
      96, 
      48, 
      47, 
      97, 
      48, 
      71, 
      70, 
      82, 
      1, 
      140, 
      2, 
      1, 
      0, 
      140, 
      6, 
      139, 
      7, 
      164, 
      262, 
      163, 
      280, 
      148, 
      149, 
      165, 
      261, 
      164, 
      265, 
      161, 
      162, 
      166, 
      261, 
      165, 
      265, 
      160, 
      161, 
      157, 
      158, 
      269, 
      223, 
      224, 
      211, 
      229, 
      203, 
      204, 
      167, 
      168, 
      260, 
      266, 
      267, 
      159, 
      215, 
      216, 
      220, 
      261, 
      262, 
      164, 
      190, 
      191, 
      237, 
      175, 
      256, 
      257, 
      249, 
      185, 
      242, 
      158, 
      159, 
      268, 
      157, 
      269, 
      270, 
      167, 
      260, 
      166, 
      169, 
      170, 
      259, 
      252, 
      180, 
      181, 
      251, 
      182, 
      183, 
      198, 
      232, 
      233, 
      156, 
      157, 
      271, 
      258, 
      259, 
      171, 
      171, 
      259, 
      170, 
      192, 
      193, 
      235, 
      264, 
      265, 
      162, 
      155, 
      156, 
      272, 
      272, 
      273, 
      155, 
      172, 
      258, 
      171, 
      168, 
      169, 
      259, 
      254, 
      178, 
      179, 
      258, 
      172, 
      173, 
      154, 
      273, 
      274, 
      153, 
      154, 
      274, 
      174, 
      257, 
      173, 
      276, 
      151, 
      152, 
      153, 
      274, 
      275, 
      275, 
      276, 
      153, 
      174, 
      175, 
      257, 
      157, 
      270, 
      271, 
      159, 
      267, 
      268, 
      277, 
      150, 
      151, 
      175, 
      176, 
      256, 
      276, 
      277, 
      151, 
      276, 
      152, 
      153, 
      205, 
      228, 
      229, 
      277, 
      278, 
      150, 
      184, 
      249, 
      250, 
      176, 
      177, 
      255, 
      236, 
      237, 
      191, 
      149, 
      278, 
      279, 
      177, 
      178, 
      254, 
      279, 
      280, 
      149, 
      176, 
      255, 
      256, 
      263, 
      264, 
      162, 
      253, 
      254, 
      179, 
      219, 
      216, 
      217, 
      208, 
      226, 
      227, 
      247, 
      244, 
      246, 
      252, 
      253, 
      180, 
      262, 
      263, 
      163, 
      251, 
      252, 
      181, 
      183, 
      184, 
      250, 
      230, 
      202, 
      203, 
      250, 
      251, 
      183, 
      147, 
      280, 
      146, 
      225, 
      209, 
      210, 
      257, 
      258, 
      173, 
      249, 
      184, 
      185, 
      247, 
      248, 
      243, 
      243, 
      248, 
      249, 
      228, 
      205, 
      206, 
      280, 
      281, 
      144, 
      244, 
      245, 
      246, 
      185, 
      186, 
      241, 
      187, 
      188, 
      239, 
      242, 
      185, 
      241, 
      244, 
      247, 
      243, 
      278, 
      149, 
      150, 
      146, 
      280, 
      145, 
      199, 
      231, 
      232, 
      243, 
      249, 
      242, 
      186, 
      187, 
      240, 
      241, 
      186, 
      240, 
      214, 
      215, 
      221, 
      163, 
      263, 
      162, 
      239, 
      188, 
      238, 
      192, 
      236, 
      191, 
      206, 
      207, 
      227, 
      253, 
      179, 
      180, 
      240, 
      187, 
      239, 
      145, 
      280, 
      144, 
      236, 
      192, 
      235, 
      235, 
      193, 
      194, 
      234, 
      235, 
      194, 
      234, 
      194, 
      195, 
      233, 
      234, 
      195, 
      233, 
      195, 
      196, 
      233, 
      196, 
      197, 
      197, 
      198, 
      233, 
      143, 
      144, 
      281, 
      198, 
      199, 
      232, 
      260, 
      261, 
      166, 
      199, 
      200, 
      231, 
      260, 
      168, 
      259, 
      218, 
      219, 
      217, 
      226, 
      208, 
      209, 
      230, 
      231, 
      201, 
      201, 
      202, 
      230, 
      216, 
      219, 
      220, 
      189, 
      190, 
      237, 
      229, 
      230, 
      203, 
      221, 
      215, 
      220, 
      266, 
      159, 
      160, 
      222, 
      214, 
      221, 
      204, 
      205, 
      229, 
      251, 
      181, 
      182, 
      223, 
      212, 
      222, 
      211, 
      224, 
      210, 
      156, 
      271, 
      272, 
      227, 
      228, 
      206, 
      213, 
      214, 
      222, 
      212, 
      213, 
      222, 
      158, 
      268, 
      269, 
      177, 
      254, 
      255, 
      273, 
      154, 
      155, 
      207, 
      208, 
      227, 
      265, 
      266, 
      160, 
      225, 
      226, 
      209, 
      231, 
      200, 
      201, 
      224, 
      225, 
      210, 
      238, 
      189, 
      237, 
      188, 
      189, 
      238, 
      212, 
      223, 
      211, 
      142, 
      143, 
      281, 
      142, 
      281, 
      141, 
      147, 
      148, 
      280  };

  
  
  
  unsigned int VBO, VAO;      // declare variables
  glGenBuffers(1, &VBO);      // generate vertex buffer
  glGenVertexArrays(1, &VAO); // generate vertex array object
  /* bind the Vertex Array Object first, then bind and set vertex 
       buffer(s), and then configure vertex attributes(s)*/
  glBindVertexArray(VAO);
  glBindBuffer(GL_ARRAY_BUFFER, VBO);
  // copy our vertex data into buffer
  glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
  glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), (void *)0);
  //  glVertexAttribPointer(3, 7, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void *)0);

  //    Element buffer OBJECT
  unsigned int EBO;
  glGenBuffers(1, &EBO);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);


  glEnableVertexAttribArray(0);

  /* note that this is allowed, the call to glVertexAttribPointer 
       registered VBO as the vertex attribute's bound vertex buffer 
       object so afterwards we can safely unbind*/
  glBindBuffer(GL_ARRAY_BUFFER, 0);

  /* You can unbind the VAO afterwards so other VAO calls won't 
       accidentally modify this VAO, but this rarely happens. Modifying 
       other VAOs requires a call to glBindVertexArray anyways so we 
       generally don't unbind VAOs (nor VBOs) when it's not directly 
       necessary.*/
  glBindVertexArray(0);

  glBindVertexArray(VAO);

  // render loop
  // -----------
  while (!glfwWindowShouldClose(window))
  {
    //input
    //.....
    processInput(window);

    // render
    // ------
    glClearColor(0.2f, 0.3f, 0.3f, 1.0f); //green? rendering
    glClear(GL_COLOR_BUFFER_BIT);

    // draw our first triangle: using shader program
    glUseProgram(shaderProgram);

    glBindVertexArray(VAO);
    glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(float), GL_UNSIGNED_INT, 0);
    glBindVertexArray(0);
    /* glfw: swap buffers and poll IO events (keys pressed/released, 
	 mouse moved etc.)
	 --------------------------------------------------------------*/
    //cria janela e processa tudo o que nela se passa
    glfwSwapBuffers(window);

    glfwPollEvents();
  }

  // optional: de-allocate all resources once they've outlived their purpose:
  // ------------------------------------------------------------------------
  glDeleteVertexArrays(1, &VAO);
  glDeleteBuffers(1, &VBO);
  glDeleteBuffers(1, &EBO);

  glDeleteProgram(shaderProgram);

  // glfw: terminate, clearing all previously allocated GLFW resources.
  // ------------------------------------------------------------------
  glfwTerminate();
  return 0;
}
